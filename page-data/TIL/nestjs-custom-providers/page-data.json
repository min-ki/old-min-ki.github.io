{"componentChunkName":"component---src-templates-post-template-js","path":"/TIL/nestjs-custom-providers","result":{"data":{"markdownRemark":{"id":"8fbecf99-12ce-5bee-9dd8-fe7a8d9d01ab","html":"<h3 id=\"di-기초\" style=\"position:relative;\"><a href=\"#di-%EA%B8%B0%EC%B4%88\" aria-label=\"di 기초 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DI 기초</h3>\n<ul>\n<li>종속성 주입은 IoC (Inversion of Control) 기술로 Nest JS의 IoC 컨테이너에 종속성 인스턴스화를 위임한다.</li>\n<li>Service 클래스에 @Injectable() 데코레이터를 통해서 Provider 로 정의할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// cats.service.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Injectable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Cat <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./interfaces/cat.interface'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// @Injectable() 데코레이터를 통해서 해당 클래스를 Provider로 정의</span>\n@<span class=\"token function\">Injectable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CatsService</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> readonly cats<span class=\"token operator\">:</span> Cat<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Cat<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cats<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"2\">\n<li>Nest가 컨트롤러에게 provider를 주입하라 요청할 수 있음</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// cats.controller.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Controller<span class=\"token punctuation\">,</span> Get <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> CatsService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./cats.service'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Cat <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./interfaces/cat.interface'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Controller</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cats'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CatsController</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token comment\">// 의존성 주입</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">private</span> catsService<span class=\"token operator\">:</span> CatsService</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  @<span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Promise<span class=\"token operator\">&lt;</span>Cat<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>catsService<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"3\">\n<li>모듈에 Provider를 Nest IoC 컨테이너에 등록</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// app.module.ts</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Module <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> CatsController <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./cats/cats.controller'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> CatsService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./cats/cats.service'</span>\n\n@<span class=\"token function\">Module</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  controllers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>CatsController<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>CatsService<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// providers로 등록한다.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 코드들에서 정확히 어떻게 동작할지 알아본다.</p>\n<ol>\n<li>cats.service.ts에서 @injectable() 데코레이터는 CatsService클래스가 Nest의 IoC container에 의해 관리되도록 선언한다.</li>\n<li>cats.controller.ts에서 CatsController는 생성자 주입과 함께 CatsService token으로 의존성을 선언</li>\n<li>app.module.ts에서 CatsService token이 cats.service.ts로 부터 오는 CatsService 클래스라는 것을 나타낸다.</li>\n</ol>\n<p>Nest IoC container가 CatsController를 인스턴스화 할 때, IoC container는 먼저 의존성들을 찾는다. 처음에는 CatsService dependency를 발견할 것이고, IoC Container는 CatsService token을 찾고 CatsService Class를 반환할 것이다.</p>\n<p>SINGLETON (싱글톤) 스코프에서 Nest는 CatsService를 생성하고 캐싱하고 반환할 것이다.</p>\n<p>만약 이것이 이미 캐시되어있다면 존재하는 인스턴스를 바로 반환할 것이다.</p>\n<h2 id=\"standard-providers\" style=\"position:relative;\"><a href=\"#standard-providers\" aria-label=\"standard providers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Standard Providers</h2>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">@<span class=\"token function\">Module</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\tcontrollers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>CatsController<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\tproviders<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>CatsService<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>데코레이터의 providers 프로퍼티는 providers들의 배열을 취한다.</li>\n<li>기존까지 보았던 providers들에 클래스 이름의 배열을 주는 것은 shorthand 방식이다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">provders<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    provider<span class=\"token operator\">:</span> CatsService<span class=\"token punctuation\">,</span>\n    useClass<span class=\"token operator\">:</span> CatsService<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<ul>\n<li>위와 같은 구조가 원래의 명시적인 구조</li>\n<li>이것을 통해서 명확하게 CatsService provider가 CatsService 클래스와 연관있다는것을 알 수 있음</li>\n<li>short-hand는 단지 대부분의 동일한 이름의 클래스가 제공자로 사용되는 use-case에서 간결하게 사용하고 싶어서 사용한것</li>\n</ul>\n<h3 id=\"custom-providers\" style=\"position:relative;\"><a href=\"#custom-providers\" aria-label=\"custom providers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Custom providers</strong></h3>\n<p>만약 요구사항이 기존의 표준 공급자의 동작방식에 비해서 부족한경우에는? 다음과 같은 예들을 보자.</p>\n<ul>\n<li>클래스를 인스턴스화 (캐시된 인스턴스 반환)하는 대신 사용자 지정 인스턴스를 생성하려는 경우</li>\n<li>두 번째 종속성에서 기존 클래스를 다시 사용하려는 경우</li>\n<li>테스트용으로 클래스를 목업으로 재정의 하려는 경우</li>\n</ul>\n<p><strong>⇒ Custom Providers를 사용하면 해결 가능!</strong></p>\n<h3 id=\"value-providers-usevalue\" style=\"position:relative;\"><a href=\"#value-providers-usevalue\" aria-label=\"value providers usevalue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Value providers: useValue</h3>\n<ul>\n<li>useValue 문법은 상수를 주입하거나, 외부의 라이브러리를 Nest Container로 주입하거나, mock object로 교체할 목적으로 사용하면 유용하다!</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> CatsService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./cats.service'</span>\n\n<span class=\"token keyword\">const</span> mockCatsService <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* mock implementation\n  ...\n  */</span>\n<span class=\"token punctuation\">}</span>\n\n@<span class=\"token function\">Module</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  imports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>CatsModule<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      provide<span class=\"token operator\">:</span> CatsService<span class=\"token punctuation\">,</span>\n      useValue<span class=\"token operator\">:</span> mockCatsService<span class=\"token punctuation\">,</span> <span class=\"token comment\">// mock 으로 교체하기 위해서 사용할 수 있다.</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>위의 예제에서는 CatsService Token은 Mocking Object로 대채됩니다.</li>\n<li>useValue에는 CatsService 클래스와 동일한 인터페이스를 가진 리터럴 오브젝트가 필요합니다.</li>\n<li>TypeScript의 구조화된 입력으로 인해 리터럴 객체 또는 새로 인스턴스화 된 클래스의 인스턴스를 포함하여 호환되는 모든 객체를 사용할 수 있습니다.</li>\n</ul>\n<h3 id=\"non-class-based-provider-tokens\" style=\"position:relative;\"><a href=\"#non-class-based-provider-tokens\" aria-label=\"non class based provider tokens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non-class based provider tokens</h3>\n<ul>\n<li>지금까지는 provider token을 클래스의 네임으로 사용하였습니다.</li>\n<li>하지만 가끔은 문자열이나 기호를 DI에 대한 토큰으로 사용할 수 있는 유연성을 원하기도 합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> connection <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./connection'</span>\n\n@<span class=\"token function\">Module</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      provide<span class=\"token operator\">:</span> <span class=\"token string\">'CONNECTION'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 문자열 사용</span>\n      useValue<span class=\"token operator\">:</span> connection<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 외부의 파일로부터 객체를 주입해준다.</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppModule</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>string을 제공자의 토큰 값으로 사용할 뿐만아니라, Javascripts의 Symbols 도 사용할 수 있고 TypeScript의 Enums도 사용할 수 있다.</p>\n<ul>\n<li>이전에 우리는 표준 생성자 주입 패턴을 생성자 기반의 주입 패턴을 사용하였다.</li>\n<li>이 패턴은 클래스 이름과 함께 선언되어야 했다.</li>\n<li>‘CONNECTION’ 커스텀 제공자는 문자열 기반의 제공자 토큰을 사용한다.</li>\n<li>다음은 이러한 커스텀 제공자를 어떻게 주입하는지 알아볼 것이다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">@<span class=\"token function\">Injectable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CatsRepository</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>@<span class=\"token function\">Inject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'CONNECTION'</span><span class=\"token punctuation\">)</span> connection<span class=\"token operator\">:</span> Connection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>@Inject() 데코레이터는 단일 인자로 토큰을 취한다.</li>\n<li>@Inject() 데코레이터는 @nestjs/common 패키지로부터 import</li>\n</ul>","fields":{"slug":"/TIL/nestjs-custom-providers","tagSlugs":["/tag/nest-js/","/tag/framework/"]},"frontmatter":{"date":"2021-01-13T22:00:00.000Z","description":"Custom Providers","tags":["NestJS","Framework"],"title":"NestJS - Custom Providers","socialImage":null}}},"pageContext":{"slug":"/TIL/nestjs-custom-providers"}},"staticQueryHashes":["251939775","3942705351","401334301"]}