{"componentChunkName":"component---src-templates-post-template-js","path":"/공식문서/uvloop","result":{"data":{"markdownRemark":{"id":"9d2bf7a5-7093-5ce9-bcce-e28853408949","html":"<h1 id=\"uvloop\" style=\"position:relative;\"><a href=\"#uvloop\" aria-label=\"uvloop permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>uvloop</h1>\n<ul>\n<li>\n<p>uvloop는 빠르고 내장된 asyncio event loop를 쉽게 대채</p>\n<ul>\n<li>내장된 event loop는 뭘까?</li>\n<li>\n<p>PEP3156에 나와있고 아래와 같이 운영체제별로 구현체가 존재</p>\n<ul>\n<li>유닉스 계열은 SelectorEventLoop</li>\n<li>윈도우 ProactoEventLoop</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>MIT 라이센스</li>\n<li>\n<p>uvloop는 asyncio를 빠르게 만든다.</p>\n<ul>\n<li>nodejs, gevent, 다른 파이썬 비동기보다 최소 2~4배이상 빠르다고 한다</li>\n<li>uvloop 기반의 asyncio는 Go 프로그램의 퍼포먼스에 근접한다.</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"architecture\" style=\"position:relative;\"><a href=\"#architecture\" aria-label=\"architecture permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Architecture</h1>\n<p>PEP 3156에서 소개된 asyncio 모듈은 네트워크 전송, 프로토콜, 스트림 추상화들의 집합을 이벤트 루프 플러그인으로 만들어 놓은 것이다.</p>\n<p>asyncio 모듈은 다음과 같은 API들을 제공한다.</p>\n<ul>\n<li>호출을 스케줄링</li>\n<li>네트워크를 통해 데이터를 전송</li>\n<li>DNS 쿼리를 수행</li>\n<li>OS 시그널을 처리</li>\n<li>서버와 커넥션을 생성하기 위한 편리한 추상화</li>\n<li>자식 프로세스와 비동기적으로 동작</li>\n</ul>\n<p>uvloop는 <code class=\"language-text\">asyncio.AbstractEventLoop</code> 인터페이스의 구현체인데, 이것은 asyncio 이벤트 루프를 쉽게 대채할 수 있는 수단이다. <code class=\"language-text\">asyncio.AbstractEventLoop</code> 인터페이스만 준수한다면 이벤트 루프를 쉽게 교체가능하다.</p>\n<p>uvloop는 libuv 위에서 Cython으로 작성되었다. libuv는 Node.js에서 사용되는 고성능의 멀티플랫폼 비동기 I/O 라이브러리로 빠르고 안정적이기때문에 Node.js가 널리 퍼지고 인기가 있을 수 있었던 이유이다.</p>\n<p>uvloop는 모든 asyncio 이벤트 루프의 API들을 구현하였다. 고수준 레벨의 파이썬 객체들로 libuv 구조체와 함수들로 래핑을 하였다. 코드를 간결하게하기위해서 상속을 사용하였고 메모리 관리를 보장하기 위해서 libuv의 원시적인 생명주기와 동일하게 하였다.</p>\n<h1 id=\"설치\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EC%B9%98\" aria-label=\"설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설치</h1>\n<ul>\n<li>uvloop는 PyPI를 통해서 설치 가능하다.</li>\n<li>최소 Python 3.5 버전을 필요로 한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> uvloop</code></pre></div>\n<h1 id=\"uvloop의-사용\" style=\"position:relative;\"><a href=\"#uvloop%EC%9D%98-%EC%82%AC%EC%9A%A9\" aria-label=\"uvloop의 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>uvloop의 사용</h1>\n<p>파이썬 내장 모듈인 asyncio가 uvloop를 사용하도록 하기위해서는, 설치한 uvloop를 event loop policy로 설정해주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> asyncio\n<span class=\"token keyword\">import</span> uvloop\n\n<span class=\"token comment\"># set_event_loop_policy로 uvloop를 설정하면 이벤트 루프를 생성할때 해당 이벤트 루프 정책을 따라간다.</span>\nasyncio<span class=\"token punctuation\">.</span>set_event_loop_policy<span class=\"token punctuation\">(</span>uvloop<span class=\"token punctuation\">.</span>EventLoopPolicy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>또한, uvloop를 생성해서 이벤트 루프로 설정해주는 방법도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> asyncio\n<span class=\"token keyword\">import</span> uvloop\n\n<span class=\"token comment\"># uvloop 이벤트 루프를 생성해서  asyncio 이벤트루프로 설정</span>\nloop <span class=\"token operator\">=</span> uvloop<span class=\"token punctuation\">.</span>new_event_loop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nasyncio<span class=\"token punctuation\">.</span>set_event_loop<span class=\"token punctuation\">(</span>loop<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"참고자료\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\" aria-label=\"참고자료 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고자료</h2>\n<p><a href=\"https://docs.python.org/ko/3/library/selectors.html#module-selectors\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">selectors - High-level I/O multiplexing - Python 3.10.1 documentation</a></p>\n<p><a href=\"https://www.python.org/dev/peps/pep-3156/#abstract\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PEP 3156 — Asynchronous IO Support Rebooted: the “asyncio” Module</a></p>","fields":{"slug":"/공식문서/uvloop","tagSlugs":["/tag/python/","/tag/pep-3156/","/tag/asyncio/","/tag/uvloop/"]},"frontmatter":{"date":"2021-12-28T00:00:00.000Z","description":"uvloop","tags":["python","pep3156","asyncio","uvloop"],"title":"uvloop 정리","socialImage":null}}},"pageContext":{"slug":"/공식문서/uvloop"}},"staticQueryHashes":["251939775","3942705351","401334301"]}